<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | Zuchos.com]]></title>
  <link href="http://zuchos.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://zuchos.github.io/"/>
  <updated>2015-05-28T09:02:20+02:00</updated>
  <id>http://zuchos.github.io/</id>
  <author>
    <name><![CDATA[Łukasz Żuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to write a subscriber for akka-streams?]]></title>
    <link href="http://zuchos.github.io/blog/2015/05/23/how-to-write-a-subscriber-for-akka-streams/"/>
    <updated>2015-05-23T00:05:10+02:00</updated>
    <id>http://zuchos.github.io/blog/2015/05/23/how-to-write-a-subscriber-for-akka-streams</id>
    <content type="html"><![CDATA[<p>Recently I started using <em>akka-http</em> and what I was trying to achieve was to receive data from request, send response that the data were received successfully and then process it asynchronously. The other requirement was that the processing flow could be complicated in the future and some parts of it could be faster than other, so I decided to use <em>akka-streams</em> for that. I started with empty <em>akka-http</em> service:</p>

<p><figure class='code'><figcaption><span>SimpleService <a href="https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala">https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">trait</span> <span class="nc">SimpleService</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span><span class="k">:</span> <span class="kt">ActorSystem</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">executor</span><span class="k">:</span> <span class="kt">ExecutionContextExecutor</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span><span class="k">:</span> <span class="kt">FlowMaterializer</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">routes</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">path</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">get</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">complete</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">object</span> <span class="nc">NaiveGsServer</span> <span class="k">extends</span> <span class="nc">App</span> <span class="k">with</span> <span class="nc">SimpleService</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'><span class="k">override</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">executor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'><span class="k">override</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorFlowMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">config</span> <span class="k">=</span> <span class="nc">ConfigFactory</span><span class="o">.</span><span class="n">load</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Http</span><span class="o">().</span><span class="n">bindAndHandle</span><span class="o">(</span><span class="n">routes</span><span class="o">,</span> <span class="n">config</span><span class="o">.</span><span class="n">getString</span><span class="o">(</span><span class="s">&quot;http.host&quot;</span><span class="o">),</span> <span class="n">config</span><span class="o">.</span><span class="n">getInt</span><span class="o">(</span><span class="s">&quot;http.port&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->


<p>Now we want to add new route that will accept data from sender. For this purpose we are going to add it to the routing definition.</p>

<p><figure class='code'><figcaption><span>routes <a href="https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala">https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">routes</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">path</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">hello</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">get</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">complete</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span> <span class="nc">World</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="o">~</span>
</span><span class='line'>    <span class="n">path</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">post</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">entity</span><span class="o">(</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">parameter</span><span class="o">(&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">sender</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">(</span><span class="n">dataAsString</span><span class="o">,</span> <span class="n">sender</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">complete</span> <span class="o">{</span>
</span><span class='line'>            <span class="nc">HttpResponse</span><span class="o">(</span><span class="nc">StatusCodes</span><span class="o">.</span><span class="nc">OK</span><span class="o">,</span> <span class="n">entity</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Data</span> <span class="n">received</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>What is now missing is the Publisher that will publish data that came from http request into the akka-stream. To do that we need to define <code>DataPublisher</code>. It will be an implementation of <code>ActorPublisher</code> trait. It will be receiving data and then it will be publishing those to the next element in the flow.</p>

<p><figure class='code'><figcaption><span>DataPublisher <a href="https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/actors/FramePublisher.scala">https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/actors/FramePublisher.scala</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Data</span><span class="o">(</span><span class="n">sender</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">body</span><span class="k">:</span> <span class="kt">String</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">DataPublisher</span> <span class="k">extends</span> <span class="nc">ActorPublisher</span><span class="o">[</span><span class="kt">Data</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">queue</span><span class="k">:</span> <span class="kt">mutable.Queue</span><span class="o">[</span><span class="kt">Data</span><span class="o">]</span> <span class="k">=</span> <span class="n">mutable</span><span class="o">.</span><span class="nc">Queue</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Actor.Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Publish</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">queue</span><span class="o">.</span><span class="n">enqueue</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="n">publishIfNeeded</span><span class="o">()</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Request</span><span class="o">(</span><span class="n">cnt</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="n">publishIfNeeded</span><span class="o">()</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Cancel</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">context</span><span class="o">.</span><span class="n">stop</span><span class="o">(</span><span class="n">self</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">publishIfNeeded</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="n">nonEmpty</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">isActive</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">totalDemand</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">onNext</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="n">dequeue</span><span class="o">())</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">object</span> <span class="nc">DataPublisher</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">class</span> <span class="nc">Publish</span><span class="o">(</span><span class="n">data</span><span class="k">:</span> <span class="kt">Data</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you may see, the main method is <code>receive()</code> which is responsible for accepting the incoming data and responding on demand on data that is coming from subscribers.
The last thing is to define the processing flow.</p>

<p><figure class='code'><figcaption><span>flow definition <a href="https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala">https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">dataPublisherRef</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">DataPublisher</span><span class="o">])</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">dataPublisher</span> <span class="k">=</span> <span class="nc">ActorPublisher</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;dataPublisherRef&quot;</span><span class="o">&gt;</span><span class="nc">Data</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nc">Source</span><span class="o">(</span><span class="n">dataPublisher</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">runForeach</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Data</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="err">&quot;</span><span class="nc">Data</span> <span class="n">from</span> <span class="n">$</span><span class="o">{</span><span class="n">x</span><span class="o">.</span><span class="n">sender</span><span class="o">}</span> <span class="n">are</span> <span class="n">being</span> <span class="n">processed</span><span class="k">:</span> <span class="kt">$</span><span class="o">{</span><span class="kt">x.body</span><span class="o">}</span><span class="kt">&amp;ldquo</span><span class="o">;)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">onComplete</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="n">system</span><span class="o">.</span><span class="n">shutdown</span><span class="o">())</span>
</span></code></pre></td></tr></table></div></figure>  <br/>
and then publish the incoming data:</p>

<p><figure class='code'><figcaption><span>publishing <a href="https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala">https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="n">path</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="n">post</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">entity</span><span class="o">(</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">parameter</span><span class="o">(&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">sender</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="n">dataAsString</span><span class="o">,</span> <span class="n">sender</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">complete</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">dataPublisherRef</span> <span class="o">!</span> <span class="nc">Data</span><span class="o">(</span><span class="n">sender</span><span class="o">,</span> <span class="n">dataAsString</span><span class="o">)</span>
</span><span class='line'>          <span class="nc">HttpResponse</span><span class="o">(</span><span class="nc">StatusCodes</span><span class="o">.</span><span class="nc">OK</span><span class="o">,</span> <span class="n">entity</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Data</span> <span class="n">received</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now your application is ready to process incoming data with akka-streams. You may find complete example on <a href="https://github.com/Zuchos/akka-http-with-steams">github</a></p>
]]></content>
  </entry>
  
</feed>
