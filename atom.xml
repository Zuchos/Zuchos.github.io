<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zuchos.com]]></title>
  <link href="http://zuchos.github.io/atom.xml" rel="self"/>
  <link href="http://zuchos.github.io/"/>
  <updated>2015-05-25T19:44:12+02:00</updated>
  <id>http://zuchos.github.io/</id>
  <author>
    <name><![CDATA[Łukasz Żuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to write subscriber for akka-streams?]]></title>
    <link href="http://zuchos.github.io/blog/2015/05/23/how-to-write-subscriber-for-akka-streams/"/>
    <updated>2015-05-23T00:05:10+02:00</updated>
    <id>http://zuchos.github.io/blog/2015/05/23/how-to-write-subscriber-for-akka-streams</id>
    <content type="html"><![CDATA[<p>Recently I started using <em>akka-http</em> and what I was trying to achive was to receive data from request, send response that the data were recieved succefully and then, process it asynchronsly. I started with empty <em>akka-http</em> service:</p>

<figure class='code'><figcaption><span>SimpleService</span><a href='https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">trait</span> <span class="nc">SimpleService</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span><span class="k">:</span> <span class="kt">ActorSystem</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">def</span> <span class="n">executor</span><span class="k">:</span> <span class="kt">ExecutionContextExecutor</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span><span class="k">:</span> <span class="kt">FlowMaterializer</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">val</span> <span class="n">routes</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">path</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">complete</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">object</span> <span class="nc">NaiveGsServer</span> <span class="k">extends</span> <span class="nc">App</span> <span class="k">with</span> <span class="nc">SimpleService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">executor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorFlowMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">config</span> <span class="k">=</span> <span class="nc">ConfigFactory</span><span class="o">.</span><span class="n">load</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">Http</span><span class="o">().</span><span class="n">bindAndHandle</span><span class="o">(</span><span class="n">routes</span><span class="o">,</span> <span class="n">config</span><span class="o">.</span><span class="n">getString</span><span class="o">(</span><span class="s">&quot;http.host&quot;</span><span class="o">),</span> <span class="n">config</span><span class="o">.</span><span class="n">getInt</span><span class="o">(</span><span class="s">&quot;http.port&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Now we want to add new route that will accept data from sender. For this purpose we are going to add new route to the defined routes.</p>

<figure class='code'><figcaption><span>routes</span><a href='https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">path</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">get</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">complete</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">path</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="n">post</span> <span class="o">&amp;</span> <span class="n">entity</span><span class="o">(</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">&amp;</span> <span class="n">parameter</span><span class="o">(</span><span class="-Symbol">&#39;sender</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">dataAsString</span><span class="o">,</span> <span class="n">sender</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">complete</span> <span class="o">{</span>
</span><span class='line'>          <span class="nc">HttpResponse</span><span class="o">(</span><span class="nc">StatusCodes</span><span class="o">.</span><span class="nc">OK</span><span class="o">,</span> <span class="n">entity</span> <span class="k">=</span> <span class="s">&quot;Data received&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is now missing is the Publiser that will publish data that came from http request into the akka-stream. To do that we need to define <code>DataPublisher</code>. <code>DataPublisher</code> will be an implementation of <code>ActorPublisher</code> trait. It will be receiving data and then it will be publishing those to the next element in the flow.</p>

<figure class='code'><figcaption><span>DataPublisher</span><a href='https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/actors/FramePublisher.scala'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">case</span> <span class="k">class</span> <span class="nc">Data</span><span class="o">(</span><span class="n">sender</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">body</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">DataPublisher</span> <span class="k">extends</span> <span class="nc">ActorPublisher</span><span class="o">[</span><span class="kt">Data</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">queue</span><span class="k">:</span> <span class="kt">mutable.Queue</span><span class="o">[</span><span class="kt">Data</span><span class="o">]</span> <span class="k">=</span> <span class="n">mutable</span><span class="o">.</span><span class="nc">Queue</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Actor.Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Publish</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">queue</span><span class="o">.</span><span class="n">enqueue</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
</span><span class='line'>        <span class="n">publishIfNeeded</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Request</span><span class="o">(</span><span class="n">cnt</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">publishIfNeeded</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Cancel</span> <span class="k">=&gt;</span> <span class="n">context</span><span class="o">.</span><span class="n">stop</span><span class="o">(</span><span class="n">self</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">publishIfNeeded</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="n">nonEmpty</span> <span class="o">&amp;&amp;</span> <span class="n">isActive</span> <span class="o">&amp;&amp;</span> <span class="n">totalDemand</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onNext</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="n">dequeue</span><span class="o">())</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">object</span> <span class="nc">DataPublisher</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">class</span> <span class="nc">Publish</span><span class="o">(</span><span class="n">data</span><span class="k">:</span> <span class="kt">Data</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As you may see, the main method is the receive method which is responsible for accepting the incoming data and responding on demand on data that is comming from subscribers.
The last thing to implement is to define the processing flow:</p>

<figure class='code'><figcaption><span>flow definition</span><a href='https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">val</span> <span class="n">dataPublisherRef</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">DataPublisher</span><span class="o">])</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">dataPublisher</span> <span class="k">=</span> <span class="nc">ActorPublisher</span><span class="o">[</span><span class="kt">Data</span><span class="o">](</span><span class="n">dataPublisher</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Source</span><span class="o">(</span><span class="n">dataPublisher</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">runForeach</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Data</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Data from ${x.sender} are being processed: ${x.body}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">onComplete</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="n">system</span><span class="o">.</span><span class="n">shutdown</span><span class="o">())</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
and then publish the incoming data:</p>

<figure class='code'><figcaption><span>publishing</span><a href='https://github.com/Zuchos/akka-http-with-steams/blob/master/src/main/scala/pl/zuchos/example/NaiveGsServer.scala'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">path</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="n">post</span> <span class="o">&amp;</span> <span class="n">entity</span><span class="o">(</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">&amp;</span> <span class="n">parameter</span><span class="o">(</span><span class="-Symbol">&#39;sender</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">dataAsString</span><span class="o">,</span> <span class="n">sender</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">complete</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">dataPublisherRef</span> <span class="o">!</span> <span class="nc">Data</span><span class="o">(</span><span class="n">sender</span><span class="o">,</span> <span class="n">dataAsString</span><span class="o">)</span>
</span><span class='line'>          <span class="nc">HttpResponse</span><span class="o">(</span><span class="nc">StatusCodes</span><span class="o">.</span><span class="nc">OK</span><span class="o">,</span> <span class="n">entity</span> <span class="k">=</span> <span class="s">&quot;Data received&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you application is ready to process data incoming data with akka-streams. You may find complete example on <a href="https://github.com/Zuchos/akka-http-with-steams">github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confitura 2014 - Developers family reunion]]></title>
    <link href="http://zuchos.github.io/blog/2014/07/06/confitura-2014-developers-family-reunion/"/>
    <updated>2014-07-06T10:00:00+02:00</updated>
    <id>http://zuchos.github.io/blog/2014/07/06/confitura-2014-developers-family-reunion</id>
    <content type="html"><![CDATA[<p>I like this time of the year. Summers just begins, it&rsquo;s nice and warm outside the sun is shining and my favorite community conference takes place. Confitura is very close to my heart. I had a pleasure to participate in the organization in the past. But this year I was on the other side, a speaker. I was a bit curious how community will react on the topic of my speech (&ldquo;How to be a happy Developer?&rdquo;)? Would it catch attention and fill the room? It was a &ldquo;soft&rdquo; presentation after all.</p>

<!--more-->


<p>But my doubts vanished in the air of full venue and were definitely gone afterwards when the applause rang out. Thank you for attending to my presentation, it was a pleasure to share my insights about carrier with you. For those who chose the other session, no worries, you will still be able to watch it. Just wait a bit and follow ConfituraPL on Twitter or Facebook (the video should be available on youtube).</p>

<p>One of the insight on my presentation was that &ldquo;the most important are the people around you&rdquo; and that&rsquo;s the thing that I love about Confitura. Each year I have a great opportunity to meet lot&rsquo;s of people. Those that I met during studies, my past jobs, community leaders and conference veterans. It&rsquo;s like family reunion. I haven&rsquo;t seen many of those guys for a long time and sometimes we haven’t heard from each other for a while, but during Confitura we talk together, gossip or joke like it was yesterday. Besides that I met lot&rsquo;s of new people too, I hope we will see each other next year (or maybe during WarsJava?).</p>

<p>Kudos for organizers and volunteers, job well done. That was great developers family reunion!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does Agile mean to you?]]></title>
    <link href="http://zuchos.github.io/blog/2013/12/16/what-does-agile-mean-to-you/"/>
    <updated>2013-12-16T09:49:04+01:00</updated>
    <id>http://zuchos.github.io/blog/2013/12/16/what-does-agile-mean-to-you</id>
    <content type="html"><![CDATA[<p>Not so long time a go, I was on the conference about Agile (<a href="http://agilebyexample.com/">AgileByExample</a> - great conference by the way) and one of the sponsors has a win-tablet contest. To win brand new Nexus you had to post on their facebook wall answer for a question:</p>

<blockquote><p>What does Agile mean to you?</p></blockquote>

<p>I posted 2 answers but the contest was setup and someone else won my Nexus (just kidding of course). Conference was over but the question was coming back, ringing in my head. What the hell is Agile ? Is it methodology (ugly word), nickname for <strong>Scrum</strong>, <strong>XP</strong> or maybe just a <strong>buzzword</strong>? Other questions emerged: Who could be <strong>agile</strong>? Developer? Analyst? CEO? Housewife? My confusion was rising… I knew that I had to start from the beginning. What is called Agile by most of the people? For sure one of those:</p>

<ul>
<li>TDD</li>
<li>Scrum</li>
<li>Kanban</li>
</ul>


<h4>What are the similarities?</h4>

<p>TDD gives me flexibility to change my code anytime and I know that it will work as I&rsquo;m expecting. Scrum (same as Kanban) helps me to deal with changing (or just discovered) customer&rsquo;s requirements. Main difference between agile approach and its opposite: <strong>waterfall</strong> (or simply planned end-to-end process) is ability to handle <strong>change</strong>. So simply agile means <strong>being adaptive</strong>.
 Adaptation is very important thing, in fact it&rsquo;s a matter of live or dead.</p>

<blockquote><p>It is not the strongest of the species that survives, nor the most intelligent that survives. It is the one that is the most adaptable to change. <cite>Charls Darvin</cite></p></blockquote>

<p>So if you don&rsquo;t want to end up like mammoth or dinosaurs, be adaptive! I think that the reason why nowadays start-ups and small innovative companies are so successful. They are adaptive!</p>

<p><img class="centered" src="http://zuchos.github.io/images/posts/2013/mamooth.jpg" title="Mamooth" ></p>

<!--more-->


<h4>Adaptive: another buzzword?</h4>

<p>But not to get from one buzzword to another, what is my definition of being adaptive. I believe that there is a philosophy behind it. I come to terms with fact that I&rsquo;m not able to plan and control everything (believe me, that it took me a while). Maybe for some of you it&rsquo;s obvious, but I&rsquo;m programmer. When I write println(&ldquo;hello world&rdquo;), the text is printed out. Moreover in the real world I am expected to make promises and fulfill them (those are named estimates, plans, sprint backlogs etc). So sometimes I may have illusion that I&rsquo;m in control. That means that: I may think long enough and come up with solution or plan that will work! And will always work… cause it&rsquo;s smart and made well.</p>

<p><img class="centered" src="http://zuchos.github.io/images/posts/2013/bingo.png" title="Bingo" ></p>

<h4>And here comes Agile…</h4>

<p>There is no a such thing as perfect plan, solution or even estimate. Some things are better than the other, but usually you don&rsquo;t know how good they are until you try. The solution is to start with something small, try it out and then change. Repeat that cycle forever (I call it: try-change cycle). There is always temptation to spend more time on planning and invent a perfect solution. But in my opinion it&rsquo;s better to spend that time on trying out. The other problem is that, in big organizations to change something you must have well-documented-bullet-proof plan and blessings from the CEO or managers. That&rsquo;s the reason why such organizations are almost incapable to change. So if you are working in such organization remember: it&rsquo;s much better to change one team (call it pilot project) immediately than spend a year to make a plan that will change organization. If your team will be successful it would be much easier to spread the change. On the other hand, if your first solution will fail you may easily change it (remember, be adaptive!).</p>

<p><img class="centered" src="http://zuchos.github.io/images/posts/2013/squirel.jpg" title="Squirrel" ></p>

<h4>Agile is direction not destination</h4>

<p>Bottom line is, be adaptive, prefer try-change cycle over thinking on master plan. Always start with something small, try it out (as it is) and then if it doesn&rsquo;t work well enough, change it. Remember! You are never <em>there</em>, something that may work today but tomorrow world will change. You should never-ever end try-change cycle. That&rsquo;s my definition of agile and anyone could be agile: student, developer, programer, CEO, housewife, literally anybody. I tried to be agile in my personal life and no surprise here, it works!</p>

<p><img class="centered" src="http://zuchos.github.io/images/posts/2013/view.jpg" title="View" ></p>

<h4>Beware</h4>

<p>Beware you will meet salesmen that will tell you that there is a magic pill called Scrum or whatever. You just buy it or make a certificate and you are agile! Just like that! If you believe them, it means that you are not agile enough. I don&rsquo;t say that making certificates or training doesn&rsquo;t make sense, just remember that those are just tools to become agile, not the agile itself.</p>

<p><img class="centered" src="http://zuchos.github.io/images/posts/2013/bees.jpg" title="Beware bees" ></p>

<h4>Disclaimer</h4>

<p>Everything you just read it&rsquo;s my personal option. I&rsquo;m not considering myself as agile guru or coach. I just think that I understood what agile means to me and I want to share this though with you. Thanks for reading that, if you disagree or have some more insights about agile just leave a comment or drop an email.</p>

<h4>Photos</h4>

<p>Photos on CC license taken from Flickr:
 <a href="http://www.flickr.com/photos/oldcola_/601738003/sizes/z/in/photolist-Vb4Ka-4rPP9f-4rPPgh-4rPPnJ-5itzM3-5Feh65-gahRsA-dkuJmM-88R7rD/">Mammoth</a>, <a href="http://www.flickr.com/photos/bac_clin/475508557/sizes/z/in/photolist-J278p-Kg2nS-KCTjC-Me1fN-NSCGa-PDrMZ-PDAza-PS47Q-QPcVy-T442t-ZtAeS-25KNVA-2tmPC6-2w9enp-2NENJw-33wuL2-34mfWk-3at2hS-3dTtJR-3qtDRE-3st5tm-3PsU3o-4adkvn-4ahoRj-4cvPAP-4hK3a8-4ivxTV-4nCCXW-4pQerx-4pT7bP-4pUgr5-4pUgJW-4pUhkq-4qH5XF-4rfyFi-4sRrQa-4CSboW-4GFCWd-4HpKFa-4Laqe6-4P77yV-4S9PQd-4XT48n-53efTY-53eRZw-552ThW-588UEb-5g6MYr-5tA42H-5un5Xp-5BvJJR/">Squirrel</a>, <a href="http://www.flickr.com/photos/timothyspics/5112748410/sizes/z/">Landscape</a>, <a href="http://www.flickr.com/photos/ell-r-brown/4516258106/sizes/z/in/photolist-7T61c5-f3Wi6x-9WnNZP-dRWH9s-ecjD6F-ho6Wix-dmRkym-9xNgdP-bwDfey-9sS75Y-b4gkgM-a6zKfM-bWm9mj-aSJeKR-8Z3UQD-82A5DE-82A93s-82wYba-e8M3aw-9ybvJf-9ybvJj-bvZDbg-7Ac1yc-amYruX-86GTLC-dTh5nZ-daDE8J-8aFr1G-8E5fRJ-8E5g2d-ciba7f-b6AURt-c5JzQY-hdSVPC-hCYySU-9p34CY-bibmR4-bnUVzr-ah1mEz-ekvzx5-9YrCPX-gvNmcT-fKuWc4-7SWaFY-9Gr4J9-cECRaC-aug7Ba-buW9Qt-9BctEg/">Beware sing</a></p>
]]></content>
  </entry>
  
</feed>
